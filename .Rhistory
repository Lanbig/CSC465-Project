list(
strip.background = list(col = "transparent"),
strip.border = list(col = "transparent"),
axis.line = list(col="transparent"),
par.strip.text=list(cex=0.8))
}
lattice.options(default.theme = cal.theme)
yrs <- (unique(caldat$yr))
nyr <- length(yrs)
print(cal.plot <- levelplot(value~woty*dotw | yr, data=caldat,
as.table=TRUE,
aspect=.12,
layout = c(1, nyr%%7),
between = list(x=0, y=c(1,1)),
strip=TRUE,
main = paste("Calendar Heat Map of ", varname, sep = ""),
scales = list(
x = list(
at= c(seq(2.9, 52, by=4.42)),
labels = month.abb,
alternating = c(1, rep(0, (nyr-1))),
tck=0,
cex = 0.9),
y=list(
at = c(0, 1, 2, 3, 4, 5, 6),
labels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday"),
alternating = 1,
cex = 0.9,
tck=0)),
xlim =c(0.4, 54.6),
ylim=c(6.6,-0.6),
cuts= ncolors - 1,
col.regions = (calendar.pal(ncolors)),
xlab="" ,
ylab="",
colorkey= list(col = calendar.pal(ncolors), width = 0.6, height = 0.5),
subscripts=TRUE
) )
panel.locs <- trellis.currentLayout()
for (row in 1:nrow(panel.locs)) {
for (column in 1:ncol(panel.locs))  {
if (panel.locs[row, column] > 0)
{
trellis.focus("panel", row = row, column = column,
highlight = FALSE)
xyetc <- trellis.panelArgs()
subs <- caldat[xyetc$subscripts,]
dates.fsubs <- caldat[caldat$yr == unique(subs$yr),]
y.start <- dates.fsubs$dotw[1]
y.end   <- dates.fsubs$dotw[nrow(dates.fsubs)]
dates.len <- nrow(dates.fsubs)
adj.start <- dates.fsubs$woty[1]
for (k in 0:6) {
if (k < y.start) {
x.start <- adj.start + 0.5
} else {
x.start <- adj.start - 0.5
}
if (k > y.end) {
x.finis <- dates.fsubs$woty[nrow(dates.fsubs)] - 0.5
} else {
x.finis <- dates.fsubs$woty[nrow(dates.fsubs)] + 0.5
}
grid.lines(x = c(x.start, x.finis), y = c(k -0.5, k - 0.5),
default.units = "native", gp=gpar(col = "grey", lwd = 1))
}
if (adj.start <  2) {
grid.lines(x = c( 0.5,  0.5), y = c(6.5, y.start-0.5),
default.units = "native", gp=gpar(col = "grey", lwd = 1))
grid.lines(x = c(1.5, 1.5), y = c(6.5, -0.5), default.units = "native",
gp=gpar(col = "grey", lwd = 1))
grid.lines(x = c(x.finis, x.finis),
y = c(dates.fsubs$dotw[dates.len] -0.5, -0.5), default.units = "native",
gp=gpar(col = "grey", lwd = 1))
if (dates.fsubs$dotw[dates.len] != 6) {
grid.lines(x = c(x.finis + 1, x.finis + 1),
y = c(dates.fsubs$dotw[dates.len] -0.5, -0.5), default.units = "native",
gp=gpar(col = "grey", lwd = 1))
}
grid.lines(x = c(x.finis, x.finis),
y = c(dates.fsubs$dotw[dates.len] -0.5, -0.5), default.units = "native",
gp=gpar(col = "grey", lwd = 1))
}
for (n in 1:51) {
grid.lines(x = c(n + 1.5, n + 1.5),
y = c(-0.5, 6.5), default.units = "native", gp=gpar(col = "grey", lwd = 1))
}
x.start <- adj.start - 0.5
if (y.start > 0) {
grid.lines(x = c(x.start, x.start + 1),
y = c(y.start - 0.5, y.start -  0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start + 1, x.start + 1),
y = c(y.start - 0.5 , -0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start, x.start),
y = c(y.start - 0.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
if (y.end < 6  ) {
grid.lines(x = c(x.start + 1, x.finis + 1),
y = c(-0.5, -0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start, x.finis),
y = c(6.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
} else {
grid.lines(x = c(x.start + 1, x.finis),
y = c(-0.5, -0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start, x.finis),
y = c(6.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
}
} else {
grid.lines(x = c(x.start, x.start),
y = c( - 0.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
}
if (y.start == 0 ) {
if (y.end < 6  ) {
grid.lines(x = c(x.start, x.finis + 1),
y = c(-0.5, -0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start, x.finis),
y = c(6.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
} else {
grid.lines(x = c(x.start + 1, x.finis),
y = c(-0.5, -0.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.start, x.finis),
y = c(6.5, 6.5), default.units = "native",
gp=gpar(col = "black", lwd = 1.75))
}
}
for (j in 1:12)  {
last.month <- max(dates.fsubs$seq[dates.fsubs$month == j])
x.last.m <- dates.fsubs$woty[last.month] + 0.5
y.last.m <- dates.fsubs$dotw[last.month] + 0.5
grid.lines(x = c(x.last.m, x.last.m), y = c(-0.5, y.last.m),
default.units = "native", gp=gpar(col = "black", lwd = 1.75))
if ((y.last.m) < 6) {
grid.lines(x = c(x.last.m, x.last.m - 1), y = c(y.last.m, y.last.m),
default.units = "native", gp=gpar(col = "black", lwd = 1.75))
grid.lines(x = c(x.last.m - 1, x.last.m - 1), y = c(y.last.m, 6.5),
default.units = "native", gp=gpar(col = "black", lwd = 1.75))
} else {
grid.lines(x = c(x.last.m, x.last.m), y = c(- 0.5, 6.5),
default.units = "native", gp=gpar(col = "black", lwd = 1.75))
}
}
}
}
trellis.unfocus()
}
lattice.options(default.theme = def.theme)
}
## Example of use: Plot financial data
## This code is not run.
if(FALSE) {
#create faux data; skip this to use data from a file or stock data
#ndays <- 1500   #set number of days
#dates <- as.POSIXlt(seq(Sys.Date()- ndays, Sys.Date() - 1, by="days"))
#vals <- runif(ndays, -100, 100)
#stock data:
stock <- "MSFT"
start.date <- "2006-01-12"
end.date <- Sys.Date()
quote <- paste("http://ichart.finance.yahoo.com/table.csv?s=",
stock,
"&a=", substr(start.date,6,7),
"&b=", substr(start.date, 9, 10),
"&c=", substr(start.date, 1,4),
"&d=", substr(end.date,6,7),
"&e=", substr(end.date, 9, 10),
"&f=", substr(end.date, 1,4),
"&g=d&ignore=.csv", sep="")
stock.data <- read.csv(quote, as.is=TRUE)
# Plot as calendar heatmap
calendarHeat(stock.data$Date, stock.data$Adj.Close, varname="MSFT Adjusted Close")
}
p1 <- calendarHeat(DateVol_agg$Date, DateVol_agg$SALES_VALUE, varname="Sales Value", color = 'r2b')
p1
dev.copy(device = png, filename = 'Sales-calendarheat.png', width = 1024, height = 768)
dev.off()
# the calendar heat for number of coupon_redempt thoughtout the years
raw_coupon_redempt = read.table("coupon_redempt.csv", sep=",", header=T ,na.strings = " ")
raw_coupon_redempt <- cbind(raw_coupon_redempt,1)
colnames(raw_coupon_redempt)[5] <- "nCoupon"
library(plyr)
coupon_redempt_agg <- ddply(raw_coupon_redempt,.(DAY),numcolwise(sum))
coupon_redempt_agg$Date <- as.Date(coupon_redempt_agg$DAY -1, origin = "2010-03-24")
p2 <- calendarHeat(coupon_redempt_agg$Date, coupon_redempt_agg$nCoupon, varname="Coupon_redempt thoughtout the years", color = 'w2g')
p2
dev.copy(device = png, filename = 'Coupon_redempt-calendarheat.png', width = 1024, height = 768)
dev.off()
raw_coupon_redempt = read.table("coupon_redempt.csv", sep=",", header=T ,na.strings = " ")
raw_coupon_redempt <- cbind(raw_coupon_redempt,1)
colnames(raw_coupon_redempt)[5] <- "nCoupon"
# the calendar heat for number of coupon_redempt thoughtout the years
raw_coupon_redempt = read.table("Dataset/coupon_redempt.csv", sep=",", header=T ,na.strings = " ")
# the calendar heat for number of coupon_redempt thoughtout the years
raw_coupon_redempt = read.table("../Dataset/coupon_redempt.csv", sep=",", header=T ,na.strings = " ")
raw_coupon_redempt = read.table("./Dataset/coupon_redempt.csv", sep=",", header=T ,na.strings = " ")
raw_transaction = read.table("./Dataset/transaction_data.csv", sep=",", header=T ,na.strings = " ")
#remove NA
raw_transaction_nNA <- raw_transaction[complete.cases(raw_transaction),]
# the calendar heat for sales value
DateVol <- raw_transaction[,c("DAY","SALES_VALUE")]
DateVol_agg <- ddply(DateVol,.(DAY),numcolwise(sum))
DateVol_agg$Date <- as.Date(DateVol_agg$DAY -1, origin = "2010-03-24")
p1 <- calendarHeat(DateVol_agg$Date, DateVol_agg$SALES_VALUE, varname="Sales Value", color = 'r2b')
p1
dev.copy(device = png, filename = 'Sales-calendarheat.png', width = 1024, height = 768)
dev.off()
# Overall pattern
# Weekly pattern
# Daily pattern
#
#
#
###################################
# the calendar heat for number of coupon_redempt thoughtout the years
raw_coupon_redempt = read.table("./Dataset/coupon_redempt.csv", sep=",", header=T ,na.strings = " ")
raw_coupon_redempt <- cbind(raw_coupon_redempt,1)
colnames(raw_coupon_redempt)[5] <- "nCoupon"
library(plyr)
coupon_redempt_agg <- ddply(raw_coupon_redempt,.(DAY),numcolwise(sum))
coupon_redempt_agg$Date <- as.Date(coupon_redempt_agg$DAY -1, origin = "2010-03-24")
p2 <- calendarHeat(coupon_redempt_agg$Date, coupon_redempt_agg$nCoupon, varname="Coupon_redempt thoughtout the years", color = 'w2g')
p2
dev.copy(device = png, filename = 'Coupon_redempt-calendarheat.png', width = 1024, height = 768)
dev.off()
library(igraph)
setwd("~/Dropbox/CSC465/CSC465-Project/")
raw_transaction = read.table("./Dataset/transaction_data.csv", sep=",", header=T ,na.strings = " ")
raw_product = read.table("./Dataset/product.csv", sep=",", header=T, na.strings = " ")
raw_total <- merge(raw_transaction,raw_product,by="PRODUCT_ID", all.x=TRUE)
#remove NA
raw_total_nNA <- raw_total[complete.cases(raw_total),]
head(raw_transaction)
head(raw_product)
raw_Day1 = raw_total_nNA[raw_total_nNA$DAY == 2, ]
raw_Day1
nEdges = 0
for (household in unique(raw_Day1$household_key))
hPurchases = raw_Day1[raw_Day1$household_key == household, ]
{
row
prodID = hPurchases$DEPARTMENT[i]
{
if (prodID != prodID2)
nEdges = nEdges + 1
edges$p1[nEdges] = as.character(prodID2)
}
}
#####################
#g = simplify(g, remove.multiple = T)
#V(g)$color <- sample(rainbow(7, alpha=0.8))
#edge.width=exp(edge.betweenness(g)),
plot(g,layout=layout.circle,	# the layout method. see the igraph documentation for details
vertex.label.dist=0.5,			#puts the name labels slightly off the dots
vertex.label.color='black',		#the color of the name labels
vertex.label=V(g)$name,		#specifies the lables of the vertices. in this case the 'name' attribute is used
edges = data.frame(p0=rep(0, 10000), p1=rep(0, 10000))
for (i in 1:nrow(hPurchases))
hPurchases$DEPARTMENT[i]
prodID2 = hPurchases$DEPARTMENT[j]
}
edges$p0[nEdges] = as.character(prodID)
edges = edges[1:nEdges, ]
E(g)$weight <- edge.betweenness(g)
#vertex.size=betweenness(g)*10,
vertex.frame.color='blue', 		#the color of the border of the dots
vertex.label.cex=1)
row = hPurchases[i, ]
{
#layout=layout.fruchterman.reingold
vertex.label.font=2,			#the font of the name labels
for (j in i:nrow(hPurchases))
g = graph.data.frame(edges, directed=F)
main='Network Graph',	#specifies the title
}
{
nEdges = 0
for (household in unique(raw_Day1$household_key))
{
hPurchases = raw_Day1[raw_Day1$household_key == household, ]
for (i in 1:nrow(hPurchases))
{
row = hPurchases[i, ]
row
hPurchases$DEPARTMENT[i]
prodID = hPurchases$DEPARTMENT[i]
for (j in i:nrow(hPurchases))
{
prodID2 = hPurchases$DEPARTMENT[j]
if (prodID != prodID2)
{
nEdges = nEdges + 1
edges$p0[nEdges] = as.character(prodID)
edges$p1[nEdges] = as.character(prodID2)
}
}
}
}
edges = edges[1:nEdges, ]
#####################
g = graph.data.frame(edges, directed=F)
#g = simplify(g, remove.multiple = T)
E(g)$weight <- edge.betweenness(g)
#V(g)$color <- sample(rainbow(7, alpha=0.8))
#layout=layout.fruchterman.reingold
#edge.width=exp(edge.betweenness(g)),
#vertex.size=betweenness(g)*10,
plot(g,layout=layout.circle,	# the layout method. see the igraph documentation for details
main='Network Graph',	#specifies the title
vertex.label.dist=0.5,			#puts the name labels slightly off the dots
vertex.frame.color='blue', 		#the color of the border of the dots
vertex.label.color='black',		#the color of the name labels
vertex.label.font=2,			#the font of the name labels
vertex.label=V(g)$name,		#specifies the lables of the vertices. in this case the 'name' attribute is used
vertex.label.cex=1)
#####################
g = graph.data.frame(edges, directed=T)
g = simplify(g, remove.multiple = T)
#V(g)$color <- sample(rainbow(7, alpha=1))
V(g)$number <- sample(1:50, vcount(g), replace=TRUE)
plot(g,  layout=layout.fruchterman.reingold,	# the layout method. see the igraph documentation for details
main='Network Graph',	#specifies the title
vertex.label.dist=0.5,			#puts the name labels slightly off the dots
vertex.frame.color='blue', 		#the color of the border of the dots
vertex.label.color='black',		#the color of the name labels
vertex.label.font=2,			#the font of the name labels
vertex.label=V(g)$name,		#specifies the lables of the vertices. in this case the 'name' attribute is used
edge.width=edge.betweenness(g),
vertex.color=V(g)$color,
vertex.label.cex=1)
]
edges = data.frame(p0=rep(0, 10000), p1=rep(0, 10000))
nEdges = 0
for (household in unique(raw_Day1$household_key))
{
hPurchases = raw_Day1[raw_Day1$household_key == household, ]
for (i in 1:nrow(hPurchases))
{
row = hPurchases[i, ]
row
hPurchases$DEPARTMENT[i]
prodID = hPurchases$DEPARTMENT[i]
for (j in i:nrow(hPurchases))
{
prodID2 = hPurchases$DEPARTMENT[j]
if (prodID != prodID2)
{
nEdges = nEdges + 1
edges$p0[nEdges] = as.character(prodID)
edges$p1[nEdges] = as.character(prodID2)
}
}
}
}
edges = edges[1:nEdges, ]
#####################
g = graph.data.frame(edges, directed=F)
#g = simplify(g, remove.multiple = T)
E(g)$weight <- edge.betweenness(g)
#V(g)$color <- sample(rainbow(7, alpha=0.8))
#layout=layout.fruchterman.reingold
#edge.width=exp(edge.betweenness(g)),
#vertex.size=betweenness(g)*10,
plot(g,layout=layout.circle,	# the layout method. see the igraph documentation for details
main='Network Graph',	#specifies the title
vertex.label.dist=0.5,			#puts the name labels slightly off the dots
vertex.frame.color='blue', 		#the color of the border of the dots
vertex.label.color='black',		#the color of the name labels
vertex.label.font=2,			#the font of the name labels
vertex.label=V(g)$name,		#specifies the lables of the vertices. in this case the 'name' attribute is used
vertex.label.cex=1)
plot(g,layout=layout.circle,	# the layout method. see the igraph documentation for details
main='Network Graph',	#specifies the title
vertex.label.dist=0.5,			#puts the name labels slightly off the dots
vertex.frame.color='blue', 		#the color of the border of the dots
vertex.label.color='black',		#the color of the name labels
vertex.label.font=2,			#the font of the name labels
vertex.label=V(g)$name,		#specifies the lables of the vertices. in this case the 'name' attribute is used
vertex.label.cex=1)
dev.copy(device = png, filename = 'NetworkGrp-ProductDep.png', width = 1024, height = 768)
dev.off()
g = graph.data.frame(edges, directed=T)
g = simplify(g, remove.multiple = T)
#V(g)$color <- sample(rainbow(7, alpha=1))
V(g)$number <- sample(1:50, vcount(g), replace=TRUE)
plot(g,  layout=layout.fruchterman.reingold,	# the layout method. see the igraph documentation for details
main='Network Graph',	#specifies the title
vertex.label.dist=0.5,			#puts the name labels slightly off the dots
vertex.frame.color='blue', 		#the color of the border of the dots
vertex.label.color='black',		#the color of the name labels
vertex.label.font=2,			#the font of the name labels
vertex.label=V(g)$name,		#specifies the lables of the vertices. in this case the 'name' attribute is used
edge.width=edge.betweenness(g),
vertex.color=V(g)$color,
vertex.label.cex=1)
dev.copy(device = png, filename = 'NetworkGrp-ProductDep-D.png', width = 1024, height = 768)
dev.off()
plot(g,  layout=layout.fruchterman.reingold,	# the layout method. see the igraph documentation for details
main='Network Graph',	#specifies the title
vertex.label.dist=0.5,			#puts the name labels slightly off the dots
vertex.frame.color='blue', 		#the color of the border of the dots
vertex.label.color='black',		#the color of the name labels
vertex.label.font=2,			#the font of the name labels
vertex.label=V(g)$name,		#specifies the lables of the vertices. in this case the 'name' attribute is used
edge.width=edge.betweenness(g),
edge.arrow.size=1
vertex.color=V(g)$color,
vertex.label.cex=1)
plot(g,  layout=layout.fruchterman.reingold,	# the layout method. see the igraph documentation for details
main='Network Graph',	#specifies the title
vertex.label.dist=0.5,			#puts the name labels slightly off the dots
vertex.frame.color='blue', 		#the color of the border of the dots
vertex.label.color='black',		#the color of the name labels
vertex.label.font=2,			#the font of the name labels
vertex.label=V(g)$name,		#specifies the lables of the vertices. in this case the 'name' attribute is used
edge.width=edge.betweenness(g),
edge.arrow.size=1,
vertex.color=V(g)$color,
vertex.label.cex=1)
plot(g,  layout=layout.fruchterman.reingold,	# the layout method. see the igraph documentation for details
main='Network Graph',	#specifies the title
vertex.label.dist=0.5,			#puts the name labels slightly off the dots
vertex.frame.color='blue', 		#the color of the border of the dots
vertex.label.color='black',		#the color of the name labels
vertex.label.font=2,			#the font of the name labels
vertex.label=V(g)$name,		#specifies the lables of the vertices. in this case the 'name' attribute is used
edge.width=edge.betweenness(g),
edge.arrow.size=0.5,
vertex.color=V(g)$color,
vertex.label.cex=1)
g = graph.data.frame(edges, directed=T)
g = simplify(g, remove.multiple = T)
#V(g)$color <- sample(rainbow(7, alpha=1))
V(g)$number <- sample(1:50, vcount(g), replace=TRUE)
plot(g,  layout=layout.fruchterman.reingold,	# the layout method. see the igraph documentation for details
main='Network Graph',	#specifies the title
vertex.label.dist=0.5,			#puts the name labels slightly off the dots
vertex.frame.color='blue', 		#the color of the border of the dots
vertex.label.color='black',		#the color of the name labels
vertex.label.font=2,			#the font of the name labels
vertex.label=V(g)$name,		#specifies the lables of the vertices. in this case the 'name' attribute is used
edge.width=edge.betweenness(g),
edge.arrow.size=0.5,
vertex.color=V(g)$color,
vertex.label.cex=1)
dev.copy(device = png, filename = 'NetworkGrp-ProductDep-D.png', width = 1024, height = 768)
dev.off()
g = graph.data.frame(edges, directed=T)
g = simplify(g, remove.multiple = T)
#V(g)$color <- sample(rainbow(7, alpha=1))
V(g)$number <- sample(1:50, vcount(g), replace=TRUE)
plot(g,  layout=layout.fruchterman.reingold,	# the layout method. see the igraph documentation for details
main='Network Graph',	#specifies the title
vertex.label.dist=0.5,			#puts the name labels slightly off the dots
vertex.frame.color='blue', 		#the color of the border of the dots
vertex.label.color='black',		#the color of the name labels
vertex.label.font=2,			#the font of the name labels
vertex.label=V(g)$name,		#specifies the lables of the vertices. in this case the 'name' attribute is used
edge.width=edge.betweenness(g),
edge.arrow.size=0.3,
vertex.color=V(g)$color,
vertex.label.cex=1)
dev.copy(device = png, filename = 'NetworkGrp-ProductDep-D.png', width = 1024, height = 768)
dev.off()
library(plyr)
setwd("~/Dropbox/CSC465/CSC465-Project/")
raw_transaction = read.table("./Dataset/transaction_data.csv", sep=",", header=T ,na.strings = " ")
#remove NA
raw_transaction_nNA <- raw_transaction[complete.cases(raw_transaction),]
# the calendar heat for sales value
DateVol <- raw_transaction[,c("DAY","SALES_VALUE")]
DateVol_agg <- ddply(DateVol,.(DAY),numcolwise(sum))
DateVol_agg$Date <- as.Date(DateVol_agg$DAY -1, origin = "2010-03-24")
p1 <- calendarHeat(DateVol_agg$Date, DateVol_agg$SALES_VALUE, varname="Sales Value", color = 'r2b')
p1
dev.copy(device = png, filename = 'CalendarHeat-Sales.png', width = 1024, height = 768)
dev.off()
# Overall pattern
# Weekly pattern
# Daily pattern
#
#
#
###################################
# the calendar heat for number of coupon_redempt thoughtout the years
raw_coupon_redempt = read.table("./Dataset/coupon_redempt.csv", sep=",", header=T ,na.strings = " ")
raw_coupon_redempt <- cbind(raw_coupon_redempt,1)
colnames(raw_coupon_redempt)[5] <- "nCoupon"
library(plyr)
coupon_redempt_agg <- ddply(raw_coupon_redempt,.(DAY),numcolwise(sum))
coupon_redempt_agg$Date <- as.Date(coupon_redempt_agg$DAY -1, origin = "2010-03-24")
p2 <- calendarHeat(coupon_redempt_agg$Date, coupon_redempt_agg$nCoupon, varname="Coupon_redempt thoughtout the years", color = 'w2g')
p2
dev.copy(device = png, filename = 'CalendarHeat-Coupon_redempt.png', width = 1024, height = 768)
dev.off()
raw_transaction = read.table("./Dataset/transaction_data.csv", sep=",", header=T ,na.strings = " ")
raw_transaction$Date <- as.Date(transaction_data$DAY -1, origin = "2010-03-24")
raw_transaction$Date <- as.Date(raw_transaction$DAY -1, origin = "2010-03-24")
View(raw_transaction)
write.csv(raw_transaction, file = "transaction_wDate.csv")
?write.csv
View(raw_transaction)
write.csv(raw_transaction, file = "transaction_wDate.csv",row.names=FALSE)
